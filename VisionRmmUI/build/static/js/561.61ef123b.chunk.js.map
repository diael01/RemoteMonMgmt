{"version":3,"file":"static/js/561.61ef123b.chunk.js","mappings":"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","sources":["app-views/dashboards/device/index.js","components/shared-components/EllipsisDropdown/index.js","components/shared-components/Flex/index.js","hooks/DeviceHooks.ts","services/device/index.js","utils/index.js"],"sourcesContent":["import { DeleteOutlined, EyeOutlined, PlusCircleOutlined, SearchOutlined } from '@ant-design/icons';\r\nimport { Button, Card, Input, Menu, Table } from 'antd';\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport DeviceService from \"../../../services/device\";\r\nimport EllipsisDropdown from '../../../components/shared-components/EllipsisDropdown';\r\nimport Flex from '../../../components/shared-components/Flex';\r\nimport { useFetchDevices } from \"../../../hooks/DeviceHooks\";\r\nimport useFetchUser from \"../../../hooks/UserHooks\";\r\nimport utils from '../../../utils';\r\n\r\n\r\nexport const DeviceDashboard = () => {\r\n\tconst navigate = useNavigate();\r\n  \tconst { data, status, isSuccess } = useFetchDevices();\r\n  \tconst { data: userClaims } = useFetchUser();\r\n  \tconst [list, setList] = useState(data); \r\n\tconst [selectedRows, setSelectedRows] = useState([]);\r\n\tconst [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n\r\n\r\n\tconst dropdownMenu = row => (\r\n\t\t<Menu>\r\n\t\t\t<Menu.Item onClick={() => viewDetails(row)}>\r\n\t\t\t\t<Flex alignItems=\"center\">\r\n\t\t\t\t\t<EyeOutlined />\r\n\t\t\t\t\t<span className=\"ml-2\">View/Edit Details</span>\r\n\t\t\t\t</Flex>\r\n\t\t\t</Menu.Item>\r\n\t\t\t<Menu.Item onClick={() => deleteRow(row)}>\r\n\t\t\t\t<Flex alignItems=\"center\">\r\n\t\t\t\t\t<DeleteOutlined />\r\n\t\t\t\t\t<span className=\"ml-2\">{selectedRows.length > 0 ? `Delete (${selectedRows.length})` : 'Delete'}</span>\r\n\t\t\t\t</Flex>\r\n\t\t\t</Menu.Item>\r\n\t\t</Menu>\r\n\t);\r\n\t\r\n\tconst addDevice = () => {\r\n\t\tnavigate(`/app-views/dashboards/device/addDevice`)\r\n\t}\r\n\t\r\n\tconst viewDetails = row => {\r\n\t\tnavigate(`/app-views/dashboards/device/editDevice/${row.id}`)\r\n\t}\r\n\t\r\n\tconst deleteRow = async row => {\r\n\t\tconst objKey = 'id'\r\n\t\tlet data1 = list\r\n\t\tif(selectedRows.length > 1) {\r\n\t\t\tselectedRows.forEach(async elm => {\r\n\t\t\t\tawait DeviceService.delete(elm.id, elm.name);\t\t\t\t\r\n\t\t\t\tdata1 = utils.deleteArrayRow(data1, objKey, elm.id)\t\r\n\t\t\t\tsetList(data1);\t\r\n\t\t\t\tsetSelectedRows([]);\t\t\t\t\t\t\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tawait DeviceService.delete(row.id, row.name);\t\r\n\t\t\tdata1 = utils.deleteArrayRow(data1, objKey, row.id)\t\r\n\t\t\tsetList(data1);\t\r\n\t\t\tsetSelectedRows([]);\t\t\t\r\n\t\t}\r\n\t\r\n\t\t\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\ttitle: 'ID',\r\n\t\t\tdataIndex: 'id'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Device',\r\n\t\t\tdataIndex: 'name',\t\t\t\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'name')\r\n\t\t},\t\t\r\n\t\t{\r\n\t\t\ttitle: 'Ip',\r\n\t\t\tdataIndex: 'ip',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'ip')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Reachable',\r\n\t\t\tdataIndex: 'reachable',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'reachable')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Client ID',\r\n\t\t\tdataIndex: 'clientId',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'clientId')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Status',\r\n\t\t\tdataIndex: 'status',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'status')\r\n\t\t},\t\t\r\n\t\t{\r\n\t\t\ttitle: 'Type',\r\n\t\t\tdataIndex: 'type',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'type')\r\n\t\t},\r\n        {\r\n\t\t\ttitle: 'PatchStatus',\r\n\t\t\tdataIndex: 'patchStatus',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'patchStatus')\r\n\t\t},\r\n        {\r\n\t\t\ttitle: 'AlertStatus',\r\n\t\t\tdataIndex: 'alertStatus',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'alertStatus')\r\n\t\t},        \r\n\t\t{\r\n\t\t\ttitle: '',\r\n\t\t\tdataIndex: 'actions',\r\n\t\t\trender: (_, elm) => (\r\n\t\t\t\t<div className=\"text-right\">\r\n\t\t\t\t\t<EllipsisDropdown menu={dropdownMenu(elm)}/>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\t\r\n\tconst rowSelection = {\r\n\t\tonChange: (key, rows) => {\r\n\t\t\tsetSelectedRows(rows)\r\n\t\t\tsetSelectedRowKeys(key)\r\n\t\t}\r\n\t};\r\n\r\n\r\n\treturn (\r\n\t\t\r\n\t\t<Card>\t    \r\n\t\t\t<Flex alignItems=\"center\" justifyContent=\"space-between\" mobileFlex={false}>\t\t\t\t\r\n\t\t\t\t<div>\r\n\t\t\t\t<Button onClick={addDevice} type=\"primary\" icon={<PlusCircleOutlined />} block>Add Device</Button>\r\n\t\t\t\t</div>\t\t\t\t\r\n\t\t\t</Flex>\r\n\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t<Table \r\n\t\t\t\t\tcolumns={tableColumns} \r\n\t\t\t\t\tdataSource={data} \r\n\t\t\t\t\trowKey='id' \r\n\t\t\t\t\trowSelection={{\r\n\t\t\t\t\t\tselectedRowKeys: selectedRowKeys,\r\n\t\t\t\t\t\ttype: 'checkbox',\r\n\t\t\t\t\t\tpreserveSelectedRowKeys: false,\r\n\t\t\t\t\t\t...rowSelection,\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</Card>\r\n\t)\r\n}\r\n\r\nexport default DeviceDashboard;\r\n\r\n","import React from 'react'\r\nimport { Dropdown, Menu } from 'antd';\r\nimport { EllipsisOutlined } from '@ant-design/icons';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst EllipsisDropdown = props => {\r\n\treturn (\r\n\t\t<Dropdown overlay={props.menu} placement={props.placement} trigger={['click']}>\r\n\t\t\t<div className=\"ellipsis-dropdown\">\r\n\t\t\t\t<EllipsisOutlined />\r\n\t\t\t</div>\r\n\t\t</Dropdown>\r\n\t)\r\n}\r\n\r\nEllipsisDropdown.propTypes = {\r\n\ttrigger: PropTypes.string,\r\n\tplacement: PropTypes.string\r\n}\r\n\r\nEllipsisDropdown.defaultProps = {\r\n\ttrigger: 'click',\r\n\tplacement: 'bottomRight',\r\n\tmenu: <Menu/>\r\n};\r\n\r\nexport default EllipsisDropdown\r\n","import styled from '@emotion/styled';\r\n\r\nconst Flex = styled.div(({justifyContent, alignItems, flexDirection, gap, padding, margin}) => {\r\n\r\n\tconst baseStyle = {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: justifyContent,\r\n\t\talignItems: alignItems,\r\n\t\tgap: typeof gap === 'number' ? `${gap}px` : gap,\r\n\t}\r\n\r\n\tif (flexDirection) {\r\n\t\tbaseStyle.flexDirection = flexDirection\r\n\t}\r\n\r\n\tif (padding) {\r\n\t\tbaseStyle.padding = padding\r\n\t}\r\n\r\n\tif (margin) {\r\n\t\tbaseStyle.margin = margin\r\n\t}\r\n\r\n\treturn {...baseStyle}\r\n})\r\n\r\nexport default Flex\r\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { useMutation, useQuery, useQueryClient } from \"react-query\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DeviceDTO } from \"../types/device\";\nimport Problem from \"../types/problem\";\nimport {  message } from 'antd';\n\n\nconst useFetchDevices = () => {\n  return useQuery<DeviceDTO[], AxiosError>(\"Devices\", () =>\n    axios.get(`/api/v1/Device/GetDevices`).then((resp) => resp.data)\n  );\n};\n\nconst useFetchDevice = (id: number) => {\n  return useQuery<DeviceDTO, AxiosError>([\"Devices\", id], () =>\n    axios.get(`/api/v1/Device/${id}`).then((resp) => resp.data)\n  );\n};\n\nconst useAddDevice = () => {\n  const queryDevice = useQueryClient();\n  const nav = useNavigate();\n  return useMutation<AxiosResponse, AxiosError<Problem>, DeviceDTO>(\n    (h) => axios.post(`/api/v1/Device/AddDevice`, h),\n    {\n      onSuccess: () => {\n        queryDevice.invalidateQueries(\"Devices\");\n        nav(\"/\");\n      },\n    }\n  );\n};\n\nconst useUpdateDevice = () => {\n  const queryDevice = useQueryClient();\n  const nav = useNavigate();\n  return useMutation<AxiosResponse, AxiosError<Problem>, DeviceDTO>(\n    (h) => axios.put(`/api/v1/Device/UpdateDevice`, h),\n    {\n      onSuccess: (_, Device) => {\n        message.success(`Added ${Device.name} to Device list`);\n        queryDevice.invalidateQueries(\"Devices\");\n        nav(`/Device/${Device.id}`);\n      },\n    }\n  );\n};\n\nconst useDeleteDevice = () => {\n  const queryDevice = useQueryClient();\n  const nav = useNavigate();\n  return useMutation<AxiosResponse, AxiosError, DeviceDTO>(\n    (h) => axios.delete(`/api/v1/Device/${h.id}`),\n    {\n      onSuccess: () => {\n        queryDevice.invalidateQueries(\"Devices\");\n        nav(\"/\");\n      },\n    }\n  );\n};\n\nexport {\n  useAddDevice, useDeleteDevice, useFetchDevice, useFetchDevices, useUpdateDevice\n};\n\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport {  message } from 'antd';\r\n\r\nconst  DeviceService = {}\r\n\r\nDeviceService.add = function (data) {\r\n\treturn axios.post(\"/api/v1/device/AddDevice\", data)\r\n\t\t\t\t\t\t.then((response) => {\r\n\t\t\t\t\t\t\tmessage.success(`Added ${data.name} to Device list`);\r\n\t\t\t\t\t\t\treturn response;\r\n\t\t\t\t\t\t})\t\t\t\t\t\t\r\n\t\t\t\t\t\t.catch((err) => {\r\n\t\t\t\t\t\t\tmessage.error(err);\r\n\t\t\t\t\t\t});\t\r\n}\r\n\r\nDeviceService.update = function (data) {\r\n\treturn axios.put(\"/api/v1/device/UpdateDevice\", data)\r\n\t\t\t\t\t\t.then((response) => {\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tmessage.success(`Updated ${data.name} in Device list`);\r\n\t\t\t\t\t\t\treturn response;\r\n\t\t\t\t\t\t})\t\t\t\t\t\t\r\n\t\t\t\t\t\t.catch((err) => {\r\n\t\t\t\t\t\t\tmessage.error(err);\r\n\t\t\t\t\t\t});\t\r\n}\r\n\r\nDeviceService.delete = function (id, name) {\r\n\treturn axios.get(`/api/v1/device/DeleteDevice?id=${id}`)\r\n\t\t\t\t\t\t.then((response) => {\r\n\t\t\t\t\t\t\tmessage.success(`Deleted Device ${name} from Device list`);\r\n\t\t\t\t\t\t\treturn response;\r\n\t\t\t\t\t\t})\t\t\t\t\t\t\r\n\t\t\t\t\t\t.catch((err) => {\r\n\t\t\t\t\t\t\tmessage.error(err);\r\n\t\t\t\t\t\t});\t\r\n}\r\n\r\n\r\nexport default DeviceService;","class Utils {\r\n\r\n\t/**\r\n\t * Get first character from first & last sentences of a username\r\n\t * @param {String} name - Username\r\n\t * @return {String} 2 characters string\r\n\t */\r\n\tstatic getNameInitial(name) {\r\n\t\tlet initials = name.match(/\\b\\w/g) || [];\r\n\t\treturn ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();\r\n\t}\r\n\r\n\t/**\r\n\t * Get current path related object from Navigation Tree\r\n\t * @param {Array} navTree - Navigation Tree from directory 'configs/NavigationConfig'\r\n\t * @param {String} path - Location path you looking for e.g '/app/dashboards/analytic'\r\n\t * @return {Object} object that contained the path string\r\n\t */\r\n\tstatic getRouteInfo(navTree, path) {\r\n\t\tif( navTree.path === path ){\r\n\t\t  \treturn navTree;\r\n\t\t}\r\n\t\tlet route; \r\n\t\tfor (let p in navTree) {\r\n\t\t\tif( navTree.hasOwnProperty(p) && typeof navTree[p] === 'object' ) {\r\n\t\t\t\troute = this.getRouteInfo(navTree[p], path);\r\n\t\t\t\tif(route){\r\n\t\t\t\t\treturn route;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn route;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Get accessible color contrast\r\n\t * @param {String} hex - Hex color code e.g '#3e82f7'\r\n\t * @return {String} 'dark' or 'light'\r\n\t */\r\n\tstatic getColorContrast(hex){\r\n\t\tif(!hex) {\r\n\t\t\treturn 'dark'\r\n\t\t}\r\n\t\tconst threshold = 130;\r\n\t\tconst hRed = hexToR(hex);\r\n\t\tconst hGreen = hexToG(hex);\r\n\t\tconst hBlue = hexToB(hex);\r\n\t\tfunction hexToR(h) {return parseInt((cutHex(h)).substring(0,2),16)}\r\n\t\tfunction hexToG(h) {return parseInt((cutHex(h)).substring(2,4),16)}\r\n\t\tfunction hexToB(h) {return parseInt((cutHex(h)).substring(4,6),16)}\r\n\t\tfunction cutHex(h) {return (h.charAt(0) === '#') ? h.substring(1,7):h}\r\n\t\tconst cBrightness = ((hRed * 299) + (hGreen * 587) + (hBlue * 114)) / 1000;\r\n\t\tif (cBrightness > threshold){\r\n\t\t\treturn 'dark'\r\n\t\t} else { \r\n\t\t\treturn 'light'\r\n\t\t}\t\r\n\t}\r\n\r\n\t/**\r\n\t * Darken or lighten a hex color \r\n\t * @param {String} color - Hex color code e.g '#3e82f7'\r\n\t * @param {Number} percent - Percentage -100 to 100, positive for lighten, negative for darken\r\n\t * @return {String} Darken or lighten color \r\n\t */\r\n\tstatic shadeColor(color, percent) {\r\n\t\tlet R = parseInt(color.substring(1,3),16);\r\n\t\tlet G = parseInt(color.substring(3,5),16);\r\n\t\tlet B = parseInt(color.substring(5,7),16);\r\n\t\tR = parseInt(R * (100 + percent) / 100);\r\n\t\tG = parseInt(G * (100 + percent) / 100);\r\n\t\tB = parseInt(B * (100 + percent) / 100);\r\n\t\tR = (R<255)?R:255;  \r\n\t\tG = (G<255)?G:255;  \r\n\t\tB = (B<255)?B:255;  \r\n\t\tconst RR = ((R.toString(16).length === 1) ? `0${R.toString(16)}` : R.toString(16));\r\n\t\tconst GG = ((G.toString(16).length === 1) ? `0${G.toString(16)}` : G.toString(16));\r\n\t\tconst BB = ((B.toString(16).length === 1) ? `0${B.toString(16)}` : B.toString(16));\r\n\t\treturn `#${RR}${GG}${BB}`; \r\n\t}\r\n\r\n\t/**\r\n\t * Convert RGBA to HEX \r\n\t * @param {String} rgba - RGBA color code e.g 'rgba(197, 200, 198, .2)')'\r\n\t * @return {String} HEX color \r\n\t */\r\n\tstatic rgbaToHex(rgba) {\r\n\t\tconst trim = str => (str.replace(/^\\s+|\\s+$/gm,''))\r\n\t\tconst inParts = rgba.substring(rgba.indexOf(\"(\")).split(\",\"),\r\n\t\t\tr = parseInt(trim(inParts[0].substring(1)), 10),\r\n\t\t\tg = parseInt(trim(inParts[1]), 10),\r\n\t\t\tb = parseInt(trim(inParts[2]), 10),\r\n\t\t\ta = parseFloat(trim(inParts[3].substring(0, inParts[3].length - 1))).toFixed(2);\r\n\t\t\tconst outParts = [\r\n\t\t\tr.toString(16),\r\n\t\t\tg.toString(16),\r\n\t\t\tb.toString(16),\r\n\t\t\tMath.round(a * 255).toString(16).substring(0, 2)\r\n\t\t];\r\n\r\n\t\toutParts.forEach(function (part, i) {\r\n\t\t\tif (part.length === 1) {\r\n\t\t\t\toutParts[i] = '0' + part;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn (`#${outParts.join('')}`);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns either a positive or negative \r\n\t * @param {Number} number - number value\r\n\t * @param {any} positive - value that return when positive\r\n\t * @param {any} negative - value that return when negative\r\n\t * @return {any} positive or negative value based on param\r\n\t */\r\n\tstatic getSignNum(number, positive, negative) {\r\n\t\tif (number > 0) {\r\n\t\t\treturn positive\r\n\t\t}\r\n\t\tif (number < 0) {\r\n\t\t\treturn negative\r\n\t\t}\r\n\t\treturn null\r\n\t}\r\n\r\n\t/**\r\n\t * Returns either ascending or descending value\r\n\t * @param {Object} a - antd Table sorter param a\r\n\t * @param {Object} b - antd Table sorter param b\r\n\t * @param {String} key - object key for compare\r\n\t * @return {any} a value minus b value\r\n\t */\r\n\tstatic antdTableSorter(a, b, key) {\r\n\t\tif(typeof a[key] === 'number' && typeof b[key] === 'number') {\r\n\t\t\treturn a[key] - b[key]\r\n\t\t}\r\n\r\n\t\tif(typeof a[key] === 'string' && typeof b[key] === 'string') {\r\n\t\t\ta = a[key].toLowerCase();\r\n\t\t\tb = b[key].toLowerCase();\r\n\t\t\treturn a > b ? -1 : b > a ? 1 : 0;\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\t/**\r\n\t * Filter array of object \r\n\t * @param {Array} list - array of objects that need to filter\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - value that excluded from filter\r\n\t * @return {Array} a value minus b value\r\n\t */\r\n\tstatic filterArray(list, key, value) {\r\n\t\tlet data = list\r\n\t\tif(list) {\r\n\t\t\tdata = list.filter(item => item[key] === value)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\t/**\r\n\t * Remove object from array by value\r\n\t * @param {Array} list - array of objects\r\n\t * @param {String} key - object key target\r\n\t * @param {any} value  - target value\r\n\t * @return {Array} Array that removed target object\r\n\t */\r\n\tstatic deleteArrayRow(list, key, value) {\r\n\t\tlet data = list\r\n\t\tif(list) {\r\n\t\t\tdata = list.filter(item => item[key] !== value)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\t/**\r\n\t * Wild card search on all property of the object\r\n\t * @param {Number | String} input - any value to search\r\n\t * @param {Array} list - array for search\r\n\t * @return {Array} array of object contained keyword\r\n\t */\r\n\tstatic wildCardSearch(list, input) {\r\n\t\tconst searchText = (item) => {\r\n\t\t\tfor (let key in item) {\r\n\t\t\t\tif (item[key] == null) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (item[key].toString().toUpperCase().indexOf(input.toString().toUpperCase()) !== -1) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tlist = list.filter(value => searchText(value));\r\n\t\treturn list;\r\n\t}\r\n\r\n\t/**\r\n\t * Get Breakpoint\r\n\t * @param {Object} screens - Grid.useBreakpoint() from antd\r\n\t * @return {Array} array of breakpoint size\r\n\t */\r\n\tstatic getBreakPoint(screens) {\r\n\t\tlet breakpoints = []\r\n\t\tfor (const key in screens) {\r\n\t\t\tif (screens.hasOwnProperty(key)) {\r\n\t\t\t\tconst element = screens[key];\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\tbreakpoints.push(key)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn breakpoints\r\n\t}\r\n}\r\n\r\nexport default Utils;"],"names":["DeviceDashboard","navigate","useNavigate","useFetchDevices","data","status","isSuccess","useFetchUser","useState","list","setList","selectedRows","setSelectedRows","selectedRowKeys","setSelectedRowKeys","viewDetails","row","id","deleteRow","objKey","data1","length","forEach","elm","DeviceService","name","utils","tableColumns","title","dataIndex","sorter","a","b","render","_","className","menu","onClick","alignItems","rowSelection","onChange","key","rows","justifyContent","mobileFlex","type","icon","block","columns","dataSource","rowKey","preserveSelectedRowKeys","EllipsisDropdown","props","overlay","placement","trigger","defaultProps","Flex","styled","flexDirection","gap","padding","margin","baseStyle","display","useQuery","axios","then","resp","response","message","catch","err","Utils","initials","match","shift","pop","toUpperCase","navTree","path","route","p","hasOwnProperty","this","getRouteInfo","hex","hRed","parseInt","cutHex","substring","hGreen","h","hexToG","hBlue","hexToB","charAt","color","percent","R","G","B","RR","toString","GG","BB","rgba","trim","str","replace","inParts","indexOf","split","r","g","parseFloat","toFixed","outParts","Math","round","part","i","join","number","positive","negative","toLowerCase","value","filter","item","input","searchText","screens","breakpoints","push"],"sourceRoot":""}